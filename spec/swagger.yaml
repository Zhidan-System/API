# This is an **example** API to demontstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

swagger: '2.0'
# You should specify common part of your endpoints in the following format:
#   <schemes>://<host><basepath>
schemes:
  - http # Remove if your API doesn't support HTTP
  # - https # Remove if your API donsn't support HTTPS
host: zhidan.site # Replace with your hostname. You can also specify port e.g. example.com:777
basePath: /api/v1 # Replace with your basePath. Note: SHOULD begin with '/'.
info:
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    This is a Zhidan System API documents created with OpenAPI specification.
   
  version: '1.0.0' # Your API version
  # It can be any string but it is better to use semantic versioning: http://semver.org/
  # Warning: OpenAPI require version to be string, but without quotation YAML can recognize it as number.

  title: Zhidan System # Replace with your API title
  # Keep it simple. Don't add "API" or verison at the end of the string.

  # termsOfService: 'https://example.com/terms/' # [Optional] Replace with an URL to your ToS
  
  # contact:
  #   email: contact@example.com # [Optional] Replace with your contact email
  #   url: 'http://example.com/contact' # [Optional] Replace with link to your contact form
  
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://raw.githubusercontent.com/Zhidan-System/Dashboard/master/assets/images/logo.jpg'
externalDocs:
  description: 知单(Zhidan)智慧餐厅系统，为食客与后厨提供高效的下单通道。
  url: 'https://github.com/Zhidan-System/Dashboard'
produces:
  # List of mime types your API endpoins can return.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not used in your API
  - application/json
  - application/xml
  - text/csv
  # you can add any mime type your API produces to the list
consumes:
  # List of mime types your API endpoins consumes.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not supported by your API
  - application/json
  - application/xml
  # you can add any mime type your API consumes to the list

# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Restaurant
    description: 餐厅信息
  - name: Session
    description: 登录会话状态
  - name: Menu
    description: 菜单
  - name: Order
    description: 订单
  - name: TODO
    description: 未完成
# Security scheme definitions that can be used across the specification.

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  /restaurant:
    post:
      tags:
        - Restaurant
      summary: 注册餐厅
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: manager_number
          type: string
          required: true
          description: manager's number
        - in: formData
          name: password
          type: string
          required: true
          description: manager's password
        - in: formData
          name: restaurant_name
          type: string
          required: true
          description: restaurant's name
      responses:
        201:
          description: OK
          schema:
            $ref: "#/definitions/Restaurant"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
    get:
      tags:
        - Restaurant
      summary: 获取餐厅账户信息
      parameters:
        - in: query
          name: number
          type: string
          required: true
          description: manager's number
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Restaurant"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
    put:
      tags:
        - Restaurant
        - TODO
      summary: 更新餐厅账户信息
      parameters:
        - in: formData
          name: restaurant_name
          type: string
          description: restaurant's new name
          required: true
        - in: formData
          name: description
          type: string
          description: restaurant's new brief description
          required: true
        - in: formData
          name: restaurant_number
          type: string
          description: restaurant's new number, different from manager number
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Restaurant"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /restaurant/desk:
    put:
      tags:
        - Restaurant
      summary: 餐厅更新餐桌数量
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: desk_number
          type: integer
          required: true
          description: new desk number
      responses:
        200:
          description: OK
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /session:
    post:
      tags:
        - Session
      summary: 账户密码登录餐厅
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: manager_number
          type: string
          required: true
          description: manager's number
        - in: formData
          name: password
          type: string
          required: true
          description: manager's password
      responses:
        201:
          description: OK
        400:
          description: Bad Request
        500:
          description: Internal Server Error
    get:
      tags:
        - Session
      summary: 检查登录状态
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: OK
        400:
          description: No login
        500:
          description: Internal Server Error
    delete:
      tags:
        - Session
      summary: 登出
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: OK
        400:
          description: No login
        500:
          description: Internal Server Error
  /menu/category:
    post:
      tags:
        - Menu
      summary: 创建分类
      consumes:
        - application/x-ww-form-urlencoded
      parameters:
        - in: formData
          name: category_name
          type: string
          required: true
          description: category name
      responses:
        201:
          description: OK
          schema:
            $ref: "#/definitions/Category"
        400:
          description: No login
        500:
          description: Internal Server Error
    put:
      tags:
        - Menu
        - TODO
      summary: 更新分类名
      consumes:
        - application/x-ww-form-urlencoded
      parameters:
        - in: formData
          name: category_id
          type: integer
          required: true
          description: 更新类别对应id
        - in: formData
          name: category_name
          type: string
          required: true
          description: category name
      responses:
        201:
          description: OK
          schema:
            $ref: "#/definitions/Category"
        400:
          description: No login
        500:
          description: Internal Server Error
    delete:
      tags:
        - Menu
      summary: 删除分类
      consumes:
        - application/x-ww-form-urlencoded
      parameters:
        - in: formData
          name: category_id
          type: integer
          required: true
          description: 删除分类对应id
      responses:
        200:
          description: OK
        400:
          description: No login
        500:
          description: Internal Server Error
  /menu/dish:
    post:
      tags:
        - Menu
      summary: 创建菜品
      consumes:
        - application/x-ww-form-urlencoded
      parameters:
        - in: formData
          name: dish_id
          type: integer
          required: true
          description: 更新菜品对应id
        - in: formData
          name: dish_name
          type: string
          required: true
          description: dish name
        - in: formData
          name: price
          type: number
          required: true
          description: dish price
        - in: formData
          name: flavor
          type: string
          required: true
          description: dish flavor
        - in: formData
          name: description
          type: string
          required: true
          description: dish description
        - in: formData
          name: category_id
          type: integer
          required: true
          description: category id to which dish belongs to
      responses:
        201:
          description: OK
          schema:
            $ref: "#/definitions/Dish"
        400:
          description: No login
        500:
          description: Internal Server Error
    delete:
      tags:
        - Menu
      summary: 删除单个菜品
      consumes:
        - application/x-ww-form-urlencoded
      parameters:
        - in: formData
          name: dish_id
          type: integer
          required: true
          description: 删除菜品对应id
      responses:
        200:
          description: OK
        400:
          description: No login
        500:
          description: Internal Server Error
  /menu/dish/detail:
    post:
      tags:
        - Menu
        - TODO
      summary: 更新菜品信息
      consumes:
        - application/x-ww-form-urlencoded
      parameters:
        - in: formData
          name: dish_name
          type: string
          required: false
          description: dish new name
        - in: formData
          name: price
          type: number
          required: false
          description: dish new price
        - in: formData
          name: flavor
          type: string
          required: false
          description: dish new flavor
        - in: formData
          name: description
          type: string
          required: false
          description: dish new description
        - in: formData
          name: category_id
          type: integer
          required: false
          description: category id to which dish belongs to
      responses:
        201:
          description: OK
          schema:
            $ref: "#/definitions/Dish"
        400:
          description: No login
        500:
          description: Internal Server Error
  /menu:
    get:
      tags:
        - Menu
      summary: 获取餐厅菜单
      consumes:
        - application/x-ww-form-urlencoded
      parameters:
        - in: query
          name: restaurant_id
          type: integer
          required: true
          description: restaurant id to which menu belongs to
      responses:
        201:
          description: OK
          schema:
            $ref: "#/definitions/Menu"
        400:
          description: No login
        500:
          description: Internal Server Error
  /order:
    post:
      tags:
        - Order
      summary: 创建订单
      consumes:
        - application/x-ww-form-urlencoded
      parameters:
        - in: formData
          name: restauran_id
          type: integer
          required: true
          description: restaurant id to which order belongs to
        - in: formData
          name: total_price
          type: number
          required: true
          description: order total price
        - in: formData
          name: desk_id
          type: integer
          required: true
          description: desk id where order created
        - in: formData
          name: tableware
          type: string
          required: true
          description: 是/否
        - in: formData
          description: dish list in order. e.g `[{}, {}]`.(please ask for API designer for help)
          name: dish_list
          type: array
          required: true
          items:
            type: integer
      responses:
        201:
          description: OK
          schema:
            $ref: "#/definitions/Order"
        400:
          description: No login
        500:
          description: Internal Server Error
    get:
      tags:
        - Order
      summary: 获取餐厅订单
      consumes:
        - application/x-ww-form-urlencoded
      parameters:
        - in: query
          name: date
          type: string
          required: true
          description: 指定获取订单日期，e.g `YY-MM-DD`
      responses:
        201:
          description: OK
          schema:
            $ref: "#/definitions/OrderCollection"
        400:
          description: No login
        500:
          description: Internal Server Error
    put:
      tags:
        - Order
      summary: 完成订单
      consumes:
        - application/x-ww-form-urlencoded
      parameters:
        - in: formData
          description: order list to update. e.g `[{}, {}]`.(please ask for API designer for help)
          name: order_list
          type: array
          required: true
          items:
            type: integer
      responses:
        201:
          description: OK
        400:
          description: No login
        500:
          description: Internal Server Error
definitions:
  Restaurant:
    type: object
    properties:
      manager_number:
        type: string
        description: manager's number
      restaurant_name:
        type: string
        description: restaurant's name
      description:
        type: string
        description: restaurant's brief description
      image_id:
        type: string
        description: restaurant's picture
      restaurant_number:
        type: string
        description: restaurant's number
  Order:
    type: object
    properties:
      order_id:
        type: integer
        description: order id
      restauran_id:
        type: integer
        description: restaurant id to which order belongs to
      date:
        type: string
        description: when order makes, eg. YY-XX-DD HH:MM:SS
      total_price:
        type: number
        description: order total price
      tableware:
        type: string
        description: 是/否
      state:
        type: string
        description: 未完成/已完成
      dish_list:
        type: array
        items:
          $ref: '#/definitions/Dish'
  OrderCollection:
    type: array
    items:
      $ref: "#/definitions/Order"
  Menu:
    type: array
    items:
      $ref: '#/definitions/Category'
  Category:
    type: object
    properties:
      category_id:
        type: integer
        description: category id
      category_name:
        type: string
        description: category name
      dishes:
        $ref: '#/definitions/DishCollection'
  DishCollection:
    type: array
    items:
      $ref: '#/definitions/Dish'
  Dish:
    type: object
    properties:
      dish_id:
        type: integer
        description: dish id in database
      date:
        type: string
        description: dish created date
      dish_name:
        type: string
        description: dish name
      image_id:
        type: string
        description: the dish image url
      price:
        type: number
        description: dish price
      flavor:
        type: string
        description: dish flavor
      category_id:
        type: integer
        description: category's id to which the dish belongs.
      favorable_rate:
        type: number
        description: dish favorable rate
      description:
        type: string
        description: dish description
      restaurant_id:
        type: integer
        description: restaurant's id to which the dish belongs.